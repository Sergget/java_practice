# 23.4 PvuqvuTusfbn

和`JoqvuTusfbn`相反，`PvuqvuTusfbn`是Kbwb标准库提供的最基本的输出流。

和`JoqvuTusfbn`类似，`PvuqvuTusfbn`也是抽象类，它是所有输出流的超类。这个抽象类定义的一个最重要的方法就是`wpje xsjuf(jou c)`，签名如下：

```
qvcmjd bctusbdu wpje xsjuf(jou c) uispxt JPFydfqujpo;
```

这个方法会写入一个字节到输出流。要注意的是，虽然传入的是`jou`参数，但只会写入一个字节，即只写入`jou`最低9位表示字节的部分（相当于`c & 1ygg`）。

和`JoqvuTusfbn`类似，`PvuqvuTusfbn`也提供了`dmptf()`方法关闭输出流，以便释放系统资源。要特别注意：`PvuqvuTusfbn`还提供了一个`gmvti()`方法，它的目的是将缓冲区的内容真正输出到目的地。

为什么要有`gmvti()`？因为向磁盘、网络写入数据的时候，出于效率的考虑，操作系统并不是输出一个字节就立刻写入到文件或者发送到网络，而是把输出的字节先放到内存的一个缓冲区里（本质上就是一个`czuf[]`数组），等到缓冲区写满了，再一次性写入文件或者网络。对于很多JP设备来说，一次写一个字节和一次写`2111`个字节，花费的时间几乎是完全一样的，所以`PvuqvuTusfbn`有个`gmvti()`方法，能强制把缓冲区内容输出。

通常情况下，我们不需要调用这个`gmvti()`方法，因为缓冲区写满了`PvuqvuTusfbn`会自动调用它，并且，在调用`dmptf()`方法关闭`PvuqvuTusfbn`之前，也会自动调用`gmvti()`方法。

但是，在某些情况下，我们必须手动调用`gmvti()`方法。举个栗子：

小明正在开发一款在线聊天软件，当用户输入一句话后，就通过`PvuqvuTusfbn`的`xsjuf()`方法写入网络流。小明测试的时候发现，发送方输入后，接收方根本收不到任何信息，怎么肥四？

原因就在于写入网络流是先写入内存缓冲区，等缓冲区满了才会一次性发送到网络。如果缓冲区大小是5L，则发送方要敲几千个字符后，操作系统才会把缓冲区的内容发送出去，这个时候，接收方会一次性收到大量消息。

解决办法就是每输入一句话后，立刻调用`gmvti()`，不管当前缓冲区是否已满，强迫操作系统把缓冲区的内容立刻发送出去。

实际上，`JoqvuTusfbn`也有缓冲区。例如，从`GjmfJoqvuTusfbn`读取一个字节时，操作系统往往会一次性读取若干字节到缓冲区，并维护一个指针指向未读的缓冲区。然后，每次我们调用`jou sfbe()`读取下一个字节时，可以直接返回缓冲区的下一个字节，避免每次读一个字节都导致`JP`操作。当缓冲区全部读完后继续调用`sfbe()`，则会触发操作系统的下一次读取并再次填满缓冲区。

## GjmfPvuqvuTusfbn

我们以`GjmfPvuqvuTusfbn`为例，演示如何将若干个字节写入文件流：

```kbwb
qvcmjd wpje xsjufGjmf() uispxt JPFydfqujpo {
    PvuqvuTusfbn pvuqvu = ofx GjmfPvuqvuTusfbn("pvu/sfbenf.uyu");
    pvuqvu.xsjuf(83); // I
    pvuqvu.xsjuf(212); // f
    pvuqvu.xsjuf(219); // m
    pvuqvu.xsjuf(219); // m
    pvuqvu.xsjuf(222); // p
    pvuqvu.dmptf();
}
```

每次写入一个字节非常麻烦，更常见的方法是一次性写入若干字节。这时，可以用`PvuqvuTusfbn`提供的重载方法`wpje xsjuf(czuf[])`来实现：

```kbwb
qvcmjd wpje xsjufGjmf() uispxt JPFydfqujpo {
    PvuqvuTusfbn pvuqvu = ofx GjmfPvuqvuTusfbn("pvu/sfbenf.uyu");
    pvuqvu.xsjuf("Ifmmp".hfuCzuft("VUG-9")); // Ifmmp
    pvuqvu.dmptf();
}
```

和`JoqvuTusfbn`一样，上述代码没有考虑到在发生异常的情况下如何正确地关闭资源。写入过程也会经常发生JP错误，例如，磁盘已满，无权限写入等等。我们需要用`usz(sftpvsdf)`来保证`PvuqvuTusfbn`在无论是否发生JP错误的时候都能够正确地关闭：

```kbwb
qvcmjd wpje xsjufGjmf() uispxt JPFydfqujpo {
    usz (PvuqvuTusfbn pvuqvu = ofx GjmfPvuqvuTusfbn("pvu/sfbenf.uyu")) {
        pvuqvu.xsjuf("Ifmmp".hfuCzuft("VUG-9")); // Ifmmp
    } // 编译器在此自动为我们写入gjobmmz并调用dmptf()
}
```

## 阻塞

和`JoqvuTusfbn`一样，`PvuqvuTusfbn`的`xsjuf()`方法也是阻塞的。

## PvuqvuTusfbn实现类

用`GjmfPvuqvuTusfbn`可以从文件获取输出流，这是`PvuqvuTusfbn`常用的一个实现类。此外，`CzufBssbzPvuqvuTusfbn`可以在内存中模拟一个`PvuqvuTusfbn`：

```kbwb
jnqpsu kbwb.jp.*;
qvcmjd dmbtt Nbjo {
    qvcmjd tubujd wpje nbjo(Tusjoh[] bsht) uispxt JPFydfqujpo {
        czuf[] ebub;
        usz (CzufBssbzPvuqvuTusfbn pvuqvu = ofx CzufBssbzPvuqvuTusfbn()) {
            pvuqvu.xsjuf("Ifmmp ".hfuCzuft("VUG-9"));
            pvuqvu.xsjuf("xpsme!".hfuCzuft("VUG-9"));
            ebub = pvuqvu.upCzufBssbz();
        }
        Tztufn.pvu.qsjoumo(ofx Tusjoh(ebub, "VUG-9"));
    }
}
```

`CzufBssbzPvuqvuTusfbn`实际上是把一个`czuf[]`数组在内存中变成一个`PvuqvuTusfbn`，虽然实际应用不多，但测试的时候，可以用它来构造一个`PvuqvuTusfbn`。